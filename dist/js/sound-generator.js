const fs=require("fs"),{exec}=require("child_process");function generateBeep(){console.log("Generating beep.mp3..."),exec("powershell -Command \"Add-Type -AssemblyName System.Speech; $speak = New-Object System.Speech.Synthesis.SpeechSynthesizer; $speak.Speak('beep'); $speak.Dispose()\"",e=>{e?console.error("Error generating beep sound:",e):console.log("Beep sound generated successfully!")})}function createNotificationSound(){console.log("Creating notification.mp3..."),fs.writeFileSync("generate-audio.html","\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>Generate Audio</title>\n  </head>\n  <body>\n    <script>\n      // Function to download the generated audio\n      function downloadAudio(buffer, filename) {\n        const wav = audioBufferToWav(buffer);\n        const blob = new Blob([new Uint8Array(wav)], { type: 'audio/wav' });\n        \n        const a = document.createElement('a');\n        a.href = URL.createObjectURL(blob);\n        a.download = filename;\n        a.click();\n      }\n      \n      // Create audio context\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // Create oscillator for notification sound\n      function createNotificationSound() {\n        const duration = 0.5;\n        const buffer = audioContext.createBuffer(1, audioContext.sampleRate * duration, audioContext.sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        for (let i = 0; i < buffer.length; i++) {\n          // Create a simple notification sound (ping)\n          const t = i / audioContext.sampleRate;\n          data[i] = Math.sin(2 * Math.PI * 880 * t) * Math.exp(-5 * t);\n        }\n        \n        downloadAudio(buffer, 'notification.wav');\n      }\n      \n      // Create message sound\n      function createMessageSound() {\n        const duration = 0.3;\n        const buffer = audioContext.createBuffer(1, audioContext.sampleRate * duration, audioContext.sampleRate);\n        const data = buffer.getChannelData(0);\n        \n        for (let i = 0; i < buffer.length; i++) {\n          // Create a simple message sound\n          const t = i / audioContext.sampleRate;\n          data[i] = Math.sin(2 * Math.PI * 440 * t) * Math.exp(-10 * t);\n        }\n        \n        downloadAudio(buffer, 'message.wav');\n      }\n      \n      // AudioBuffer to WAV conversion\n      function audioBufferToWav(buffer) {\n        const numChannels = buffer.numberOfChannels;\n        const length = buffer.length * numChannels * 2;\n        const sampleRate = buffer.sampleRate;\n        const wav = new ArrayBuffer(44 + length);\n        const view = new DataView(wav);\n        \n        // Write WAV header\n        writeString(view, 0, 'RIFF');\n        view.setUint32(4, 36 + length, true);\n        writeString(view, 8, 'WAVE');\n        writeString(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n        view.setUint16(22, numChannels, true);\n        view.setUint32(24, sampleRate, true);\n        view.setUint32(28, sampleRate * numChannels * 2, true);\n        view.setUint16(32, numChannels * 2, true);\n        view.setUint16(34, 16, true);\n        writeString(view, 36, 'data');\n        view.setUint32(40, length, true);\n        \n        // Write audio data\n        const data = new Float32Array(buffer.length * numChannels);\n        let offset = 0;\n        \n        for (let i = 0; i < buffer.numberOfChannels; i++) {\n          data.set(buffer.getChannelData(i), offset);\n          offset += buffer.length;\n        }\n        \n        floatTo16BitPCM(view, 44, data);\n        \n        return wav;\n      }\n      \n      function writeString(view, offset, string) {\n        for (let i = 0; i < string.length; i++) {\n          view.setUint8(offset + i, string.charCodeAt(i));\n        }\n      }\n      \n      function floatTo16BitPCM(output, offset, input) {\n        for (let i = 0; i < input.length; i++, offset += 2) {\n          const s = Math.max(-1, Math.min(1, input[i]));\n          output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n      }\n      \n      // Generate sounds\n      createNotificationSound();\n      createMessageSound();\n    <\/script>\n  </body>\n  </html>\n  "),console.log("Created generate-audio.html. Please open this file in a browser to generate the audio files.")}function createPlaceholderFiles(){console.log("Creating placeholder audio files..."),fs.writeFileSync("sounds/beep.mp3",""),fs.writeFileSync("sounds/notification.mp3",""),fs.writeFileSync("sounds/message.mp3",""),console.log("Created placeholder files in the sounds directory."),console.log("Please replace these with real audio files for production use.")}generateBeep(),createNotificationSound(),createPlaceholderFiles(),console.log("Done! Please check the sounds directory for the generated audio files.");